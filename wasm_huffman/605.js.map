{"version":3,"file":"605.js","mappings":"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","sources":["webpack://wasm-huffman/./pkg/index.js","webpack://wasm-huffman/./pkg/index_bg.js"],"sourcesContent":["import * as wasm from \"./index_bg.wasm\";\nexport * from \"./index_bg.js\";\nimport { __wbg_set_wasm } from \"./index_bg.js\";\n__wbg_set_wasm(wasm);\nwasm.__wbindgen_start();\n","let wasm;\nexport function __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n/**\n * @param {string} data\n * @returns {Huffdata}\n */\nexport function encode(data) {\n    const ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.encode(ptr0, len0);\n    return Huffdata.__wrap(ret);\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n}\n/**\n * @param {Huffdata} huffdata\n * @returns {string}\n */\nexport function decode(huffdata) {\n    let deferred2_0;\n    let deferred2_1;\n    try {\n        _assertClass(huffdata, Huffdata);\n        var ptr0 = huffdata.__destroy_into_raw();\n        const ret = wasm.decode(ptr0);\n        deferred2_0 = ret[0];\n        deferred2_1 = ret[1];\n        return getStringFromWasm0(ret[0], ret[1]);\n    } finally {\n        wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n    }\n}\n\nconst HuffdataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_huffdata_free(ptr >>> 0, 1));\n\nexport class Huffdata {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Huffdata.prototype);\n        obj.__wbg_ptr = ptr;\n        HuffdataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        HuffdataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_huffdata_free(ptr, 0);\n    }\n    /**\n     * @param {string} data\n     * @param {string} map\n     * @returns {Huffdata}\n     */\n    static new(data, map) {\n        const ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(map, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.huffdata_new(ptr0, len0, ptr1, len1);\n        return Huffdata.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    get_map() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.huffdata_get_map(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    get_data() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.huffdata_get_data(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nexport function __wbindgen_init_externref_table() {\n    const table = wasm.__wbindgen_export_0;\n    const offset = table.grow(4);\n    table.set(0, undefined);\n    table.set(offset + 0, undefined);\n    table.set(offset + 1, null);\n    table.set(offset + 2, true);\n    table.set(offset + 3, false);\n    ;\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n"],"names":["wasm","__wbg_set_wasm","val","cachedTextDecoder","TextDecoder","module","require","ignoreBOM","fatal","decode","cachedUint8ArrayMemory0","getUint8ArrayMemory0","byteLength","Uint8Array","memory","buffer","getStringFromWasm0","ptr","len","subarray","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","length","written","passStringToWasm0","malloc","realloc","undefined","mem","offset","code","charCodeAt","slice","data","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","ret","Huffdata","__wrap","huffdata","deferred2_0","deferred2_1","instance","klass","Error","name","_assertClass","__destroy_into_raw","__wbindgen_free","HuffdataFinalization","FinalizationRegistry","register","unregister","__wbg_huffdata_free","obj","Object","create","prototype","__wbg_ptr","this","free","map","ptr1","len1","huffdata_new","get_map","deferred1_0","deferred1_1","huffdata_get_map","get_data","huffdata_get_data","__wbindgen_init_externref_table","table","__wbindgen_export_0","grow","__wbindgen_throw","arg0","arg1"],"sourceRoot":""}