{"version":3,"file":"235.js","mappings":"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","sources":["webpack://wasm-huffman/./pkg/index_bg.js"],"sourcesContent":["import * as wasm from './index_bg.wasm';\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = new Uint8Array();\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedInt32Memory0 = new Int32Array();\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n/**\n* @param {string} data\n* @returns {Huffdata}\n*/\nexport function encode(data) {\n    const ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.encode(ptr0, len0);\n    return Huffdata.__wrap(ret);\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n/**\n* @param {Huffdata} huffdata\n* @returns {string}\n*/\nexport function decode(huffdata) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(huffdata, Huffdata);\n        var ptr0 = huffdata.ptr;\n        huffdata.ptr = 0;\n        wasm.decode(retptr, ptr0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n*/\nexport class Huffdata {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Huffdata.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_huffdata_free(ptr);\n    }\n    /**\n    * @param {string} data\n    * @param {string} map\n    * @returns {Huffdata}\n    */\n    static new(data, map) {\n        const ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(map, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.huffdata_new(ptr0, len0, ptr1, len1);\n        return Huffdata.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    get_map() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.huffdata_get_map(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    get_data() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.huffdata_get_data(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n"],"names":["cachedTextDecoder","TextDecoder","module","require","ignoreBOM","fatal","decode","cachedUint8Memory0","Uint8Array","getUint8Memory0","byteLength","getStringFromWasm0","ptr","len","subarray","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","length","written","passStringToWasm0","malloc","realloc","undefined","mem","offset","code","charCodeAt","slice","cachedInt32Memory0","Int32Array","getInt32Memory0","data","ptr0","len0","ret","Huffdata","__wrap","_assertClass","instance","klass","Error","name","huffdata","retptr","r0","r1","static","obj","Object","create","prototype","__destroy_into_raw","this","free","map","ptr1","len1","get_map","get_data","__wbindgen_throw","arg0","arg1"],"sourceRoot":""}